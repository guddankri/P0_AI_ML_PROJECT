# Importing the Dependencies
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

# Data Collection and Analysis
customer_data = pd.read_csv('Mall_Customers.csv')

# first five rows
customer_data.head()
# Finding the number of rows and columns
customer_data.shape

# getting some information about the dataset
customer_data.info()

# checking for missing values
customer_data.isnull().sum()

# Choosing the Annual Income Column & Spending Score
x = customer_data.iloc[:,[3,4]].values
print(x)

# Choosing the number of clusters
# wcss within clusters sum of Squares
#  Finding wcss value for different number of clusters
wcss = []
for i in range(1,11):
    kmeans = KMeans(n_clusters=i ,init='k-means++',random_state=42)
    kmeans.fit(x)

    wcss.append(kmeans.inertia_)
    
# plot an elbow graph

sns.set()
plt.plot(range(1,11), wcss)
plt.title('The Elbow point Graph')
plt.xlabel('Number of Clusters')
plt.ylabel('wcss')
plt.show()


# Optimum Number of clusters
# Training the k-Means clustering Model
kmeans = KMeans(n_clusters=5,init='k-means++',random_state=0)

# return a label for each data point based on their cluster

Y = kmeans.fit_predict(x)
print(Y)

# visualizing all the Clusters
# Plotting all the clusters and their Centroids
import nest_asyncio
import io
from fastapi import FastAPI
from fastapi.responses import StreamingResponse
import uvicorn
import threading
import nest_asyncio
from fastapi import FastAPI
import matplotlib.pyplot as plt
app=FastAPI()
@app.get('/plot')
async def plot():
    plt.figure(figsize=(8,8))
    plt.scatter(x[Y==0,0],x[Y==0,1],s=50,c='green',label='cluster1')
    plt.scatter(x[Y==1,0],x[Y==1,1],s=50,c='red',label='cluster2')
    plt.scatter(x[Y==2,0],x[Y==2,1],s=50,c='yellow',label='cluster3')
    plt.scatter(x[Y==3,0],x[Y==3,1],s=50,c='violet',label='cluster4')
    plt.scatter(x[Y==4,0],x[Y==4,1],s=50,c='blue',label='cluster5')

    plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],s=100,c='cyan',label='centroids')
    plt.title('Customer Groups')
    plt.xlabel('Annual Income')
    plt.ylabel('Spending Score')
    plt.show
    buf=io.BytesIO()
    plt.savefig(buf,format='png')
    buf.seek(0)
    plt.close()
    return StreamingResponse(buf, media_type='image/png')

def run_app():
    uvicorn.run(app, host='127.0.0.1', port=8000)
    thread=threading.Thread(target=run_app)
    thread.start()
